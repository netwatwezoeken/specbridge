// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specifications
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReplicateFolderSturctureFeature : object, Xunit.IClassFixture<ReplicateFolderSturctureFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ReplicateFolderSturcture.feature"
#line hidden
        
        public ReplicateFolderSturctureFeature(ReplicateFolderSturctureFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Replicate folder sturcture", ("\tAny .feature file and folder on disk is replicated to confluence\n\tin the form of" +
                    " pages and children pages to have the exact same navigational structure"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create new folder and feature")]
        [Xunit.TraitAttribute("FeatureTitle", "Replicate folder sturcture")]
        [Xunit.TraitAttribute("Description", "Create new folder and feature")]
        public async System.Threading.Tasks.Task CreateNewFolderAndFeature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create new folder and feature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "PageId",
                            "ParentPageId",
                            "Title",
                            "Content"});
                table3.AddRow(new string[] {
                            "mainpage",
                            "null",
                            "Main page",
                            "\"\""});
#line 6
 await testRunner.GivenAsync("these pages exist", ((string)(null)), table3, "Given ");
#line hidden
#line 9
 await testRunner.AndAsync("specification directory ../../../../Tests/Base", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
 await testRunner.WhenAsync("syncing to mainpage", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("a directory page named 00BasicGherkin should be created under mainpage", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
 await testRunner.ThenAsync(("a feature page named Showing basic gherkin syntax should be created under 00Basic" +
                        "Gherkin"), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update existing feature")]
        [Xunit.TraitAttribute("FeatureTitle", "Replicate folder sturcture")]
        [Xunit.TraitAttribute("Description", "Update existing feature")]
        public async System.Threading.Tasks.Task UpdateExistingFeature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update existing feature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "PageId",
                            "ParentPageId",
                            "Title",
                            "Content"});
                table4.AddRow(new string[] {
                            "mainpage",
                            "null",
                            "Main page",
                            "\"\""});
                table4.AddRow(new string[] {
                            "1",
                            "mainpage",
                            "00BasicGherkin",
                            "\"\""});
                table4.AddRow(new string[] {
                            "2",
                            "1",
                            "Showing basic gherkin syntax",
                            "\"\""});
#line 15
 await testRunner.GivenAsync("these pages exist", ((string)(null)), table4, "Given ");
#line hidden
#line 20
 await testRunner.AndAsync("specification directory ../../../../Tests/Base", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.WhenAsync("syncing to mainpage", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
 await testRunner.ThenAsync("feature pageId 2 named Showing basic gherkin syntax is updated", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete existing feature")]
        [Xunit.TraitAttribute("FeatureTitle", "Replicate folder sturcture")]
        [Xunit.TraitAttribute("Description", "Delete existing feature")]
        public async System.Threading.Tasks.Task DeleteExistingFeature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete existing feature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "PageId",
                            "ParentPageId",
                            "Title",
                            "Content"});
                table5.AddRow(new string[] {
                            "mainpage",
                            "null",
                            "Main page",
                            "\"\""});
                table5.AddRow(new string[] {
                            "1",
                            "mainpage",
                            "00BasicGherkin",
                            "\"\""});
                table5.AddRow(new string[] {
                            "2",
                            "1",
                            "Showing basic gherkin syntax",
                            "\"\""});
                table5.AddRow(new string[] {
                            "3",
                            "1",
                            "Feature not exist on disk",
                            "\"\""});
#line 25
 await testRunner.GivenAsync("these pages exist", ((string)(null)), table5, "Given ");
#line hidden
#line 31
 await testRunner.AndAsync("specification directory ../../../../Tests/Base", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
 await testRunner.WhenAsync("syncing to mainpage", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
 await testRunner.ThenAsync("feature pageId 3 named Feature not exist on disk is recursively deleted", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete existing folder")]
        [Xunit.TraitAttribute("FeatureTitle", "Replicate folder sturcture")]
        [Xunit.TraitAttribute("Description", "Delete existing folder")]
        public async System.Threading.Tasks.Task DeleteExistingFolder()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete existing folder", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "PageId",
                            "ParentPageId",
                            "Title",
                            "Content"});
                table6.AddRow(new string[] {
                            "mainpage",
                            "null",
                            "Main page",
                            "\"\""});
                table6.AddRow(new string[] {
                            "1",
                            "mainpage",
                            "00BasicGherkin",
                            "\"\""});
                table6.AddRow(new string[] {
                            "2",
                            "1",
                            "Showing basic gherkin syntax",
                            "\"\""});
                table6.AddRow(new string[] {
                            "3",
                            "mainpage",
                            "Folder not on disk",
                            "\"\""});
                table6.AddRow(new string[] {
                            "4",
                            "3",
                            "Does not exist on disk",
                            "\"\""});
#line 36
 await testRunner.GivenAsync("these pages exist", ((string)(null)), table6, "Given ");
#line hidden
#line 43
 await testRunner.AndAsync("specification directory ../../../../Tests/Base", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
 await testRunner.WhenAsync("syncing to mainpage", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
 await testRunner.ThenAsync("feature pageId 3 named Folder not on disk is recursively deleted", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ReplicateFolderSturctureFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ReplicateFolderSturctureFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
